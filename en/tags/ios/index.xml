<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>iOS - Tag - Chaos Talk</title><link>https://chaoruan.xyz/en/tags/ios/</link><description>iOS - Tag - Chaos Talk</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>blog@chaoruan.dev (Chao Ruan)</managingEditor><webMaster>blog@chaoruan.dev (Chao Ruan)</webMaster><lastBuildDate>Fri, 08 Nov 2019 22:54:00 +1100</lastBuildDate><atom:link href="https://chaoruan.xyz/en/tags/ios/" rel="self" type="application/rss+xml"/><item><title>Notes for SwiftUI and Combine Programming (1)</title><link>https://chaoruan.xyz/en/posts/notes-for-swiftui-and-combine-programming/</link><pubDate>Fri, 08 Nov 2019 22:54:00 +1100</pubDate><author>Chao Ruan</author><guid>https://chaoruan.xyz/en/posts/notes-for-swiftui-and-combine-programming/</guid><description><![CDATA[<p>I start reading <a href="https://onevcat.com/" target="_blank" rel="noopener noreffer ">onevcat</a> new book <a href="https://objccn.io/products/swift-ui" target="_blank" rel="noopener noreffer "><em>SwiftUI and Combine Programming</em></a> (a great
book to learning SwiftUI if you can read Chinese). I decided to put all the
interest parts and notes in here.</p>
<h2 id="first-things-first">First things First</h2>
<p>We always need to <code>import</code> the dependency first</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">import</span> <span class="nc">SwiftUI</span>
</span></span><span class="line"><span class="cl"><span class="kd">import</span> <span class="nc">Combine</span>
</span></span></code></pre></div><h2 id="layout-all-the-views-in-the-body">Layout all the views in the body</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">/// Layout your view here</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>some View</code> is a new concept introduced in Swift 5.1, which called <a href="https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html" target="_blank" rel="noopener noreffer ">Opaque
Types</a>. Maybe someday I will write a more detail post for opaque types, in
short, opaque types kind like <code>protocol</code> but more powerful.</p>
<h2 id="enable-canvas-in-xcode">Enable Canvas in Xcode</h2>
<p>You can preview the UI layouts using <em>Canvas</em>, which is convincing by
<code>PreviewProvider</code>. As long as your swift file have a <code>struct</code> confirm it, you
will able to work with SwiftUI and preview changes using <em>Canvas</em> support (Xcode 11+ and OS X
10.15 + Only)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">MyView_Previews</span><span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">MyView</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="canvas-is-not-fast">Canvas is not fast</h3>
<p><strong>At least not fast as I wish</strong>, we still need to build the whole project
first, then it starts working as we hope. But sometimes I found I may
easier break the UI, then Xcode start not happy anymore, showing this on canvas</p>
<figure>
</figure>

<p>In this case, we have to <strong>resume</strong> the canvas which <strong>rebuilds</strong> the project again ðŸ˜¢</p>
<h3 id="preview-with-multiple-devices">Preview with multiple devices</h3>
<p>Canvas support preview with all devices, so we can work on different size
of screens:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-swift" data-lang="swift"><span class="line"><span class="cl"><span class="kd">struct</span> <span class="nc">ContentView_Previews</span> <span class="p">:</span> <span class="n">PreviewProvider</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Group</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ContentView</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">ContentView</span><span class="p">().</span><span class="n">previewDevice</span><span class="p">(</span><span class="s">&#34;iPhone SE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">ContentView</span><span class="p">().</span><span class="n">previewDevice</span><span class="p">(</span><span class="s">&#34;iPad Air 2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After some loading ðŸ˜«, we should see something like this:</p>
<figure>
</figure>]]></description></item></channel></rss>